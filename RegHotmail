from PyQt6.QtWidgets import QApplication, QMainWindow, QTableWidget, QTableWidgetItem, QVBoxLayout, QWidget
import requests
from PyQt6.QtWidgets import QApplication, QMainWindow, QPushButton, QMessageBox
from PyQt6 import QtCore, QtGui, QtWidgets
from threading import Thread
import sys
class Ui_Reghotmail(object):
    def setupUi(self, Reghotmail):
        Reghotmail.setObjectName("Reghotmail")
        Reghotmail.resize(1271, 338)
        self.centralwidget = QtWidgets.QWidget(parent=Reghotmail)
        self.centralwidget.setObjectName("centralwidget")
        self.tableWidget = QtWidgets.QTableWidget(parent=self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(10, 10, 611, 291))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(4)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        self.groupBox = QtWidgets.QGroupBox(parent=self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(640, 10, 201, 71))
        self.groupBox.setObjectName("groupBox")
        self.pushButton_2 = QtWidgets.QPushButton(parent=self.groupBox)
        self.pushButton_2.setGeometry(QtCore.QRect(100, 30, 75, 23))
        self.pushButton_2.setStyleSheet("background-color: rgb(170, 85, 0);")
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton = QtWidgets.QPushButton(parent=self.groupBox)
        self.pushButton.setGeometry(QtCore.QRect(10, 30, 75, 23))
        self.pushButton.setStyleSheet("background-color: rgb(85, 255, 127);")
        self.pushButton.setObjectName("pushButton")
        self.groupBox_2 = QtWidgets.QGroupBox(parent=self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(880, 20, 331, 221))
        self.groupBox_2.setObjectName("groupBox_2")
        self.textEdit = QtWidgets.QTextEdit(parent=self.groupBox_2)
        self.textEdit.setGeometry(QtCore.QRect(30, 40, 241, 41))
        self.textEdit.setObjectName("textEdit")
        self.label_3 = QtWidgets.QLabel(parent=self.groupBox_2)
        self.label_3.setGeometry(QtCore.QRect(70, 20, 201, 21))
        self.label_3.setObjectName("label_3")
        self.spinBox = QtWidgets.QSpinBox(parent=self.groupBox_2)
        self.spinBox.setGeometry(QtCore.QRect(70, 90, 42, 22))
        self.spinBox.setMaximum(99999)
        self.spinBox.setObjectName("spinBox")
        self.label = QtWidgets.QLabel(parent=self.groupBox_2)
        self.label.setGeometry(QtCore.QRect(10, 90, 47, 20))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(parent=self.groupBox_2)
        self.label_2.setGeometry(QtCore.QRect(170, 90, 47, 20))
        self.label_2.setObjectName("label_2")
        self.spinBox_2 = QtWidgets.QSpinBox(parent=self.groupBox_2)
        self.spinBox_2.setGeometry(QtCore.QRect(230, 90, 42, 22))
        self.spinBox_2.setMaximum(99999)
        self.spinBox_2.setObjectName("spinBox_2")
        self.comboBox_2 = QtWidgets.QComboBox(parent=self.groupBox_2)
        self.comboBox_2.setGeometry(QtCore.QRect(60, 120, 61, 22))
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.label_5 = QtWidgets.QLabel(parent=self.groupBox_2)
        self.label_5.setGeometry(QtCore.QRect(10, 120, 47, 20))
        self.label_5.setObjectName("label_5")
        self.lineEdit_3 = QtWidgets.QLineEdit(parent=self.groupBox_2)
        self.lineEdit_3.setGeometry(QtCore.QRect(130, 150, 191, 20))
        self.lineEdit_3.setText("")
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.lineEdit_4 = QtWidgets.QLineEdit(parent=self.groupBox_2)
        self.lineEdit_4.setGeometry(QtCore.QRect(130, 180, 191, 20))
        self.lineEdit_4.setText("")
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.label_7 = QtWidgets.QLabel(parent=self.groupBox_2)
        self.label_7.setGeometry(QtCore.QRect(20, 150, 141, 20))
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(parent=self.groupBox_2)
        self.label_8.setGeometry(QtCore.QRect(20, 180, 141, 20))
        self.label_8.setObjectName("label_8")
        self.groupBox_3 = QtWidgets.QGroupBox(parent=self.centralwidget)
        self.groupBox_3.setGeometry(QtCore.QRect(640, 90, 201, 111))
        self.groupBox_3.setObjectName("groupBox_3")
        self.lineEdit_2 = QtWidgets.QLineEdit(parent=self.groupBox_3)
        self.lineEdit_2.setGeometry(QtCore.QRect(10, 60, 121, 20))
        self.lineEdit_2.setText("")
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.pushButton_3 = QtWidgets.QPushButton(parent=self.groupBox_3)
        self.pushButton_3.setGeometry(QtCore.QRect(140, 60, 51, 21))
        self.pushButton_3.setStyleSheet("background-color: rgb(85, 255, 127);")
        self.pushButton_3.setObjectName("pushButton_3")
        self.comboBox = QtWidgets.QComboBox(parent=self.groupBox_3)
        self.comboBox.setGeometry(QtCore.QRect(20, 30, 161, 22))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.label_6 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(660, 260, 291, 51))
        self.label_6.setStyleSheet("font: 10pt \"MS Shell Dlg 2\";")
        self.label_6.setObjectName("label_6")
        Reghotmail.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(parent=Reghotmail)
        self.statusbar.setObjectName("statusbar")
        Reghotmail.setStatusBar(self.statusbar)

        Reghotmail.setStatusBar(self.statusbar)

     
        self.pushButton.clicked.connect(self.Batdau)
        self.pushButton_2.clicked.connect(self.Dung)
        self.pushButton_3.clicked.connect(self.checkkey)

        self.thatbai=0
        self.thanhcong=0

        
        self.retranslateUi(Reghotmail)
        QtCore.QMetaObject.connectSlotsByName(Reghotmail)
    def checkkey(self):
        key=self.lineEdit_2.text()
        if len(key) < 5:
            self.Thongbao("Bạn Cần Điền Key API Captcha Để Check")
        else:
            try:
                tien=requests.get(f"https://api.rockcaptcha.com/user/balance?apikey={key}")
                self.Thongbao('Số Dư : '+str(tien.json()['Balance'])+"      ")
            except:self.Thongbao('Key Không Tồn Tại')
    def Dung(self):
        print("dừng")
        self.LUONGCGA = False
    def Reg(self,NAME,stt,dong,KEY_API,IDprofiles):
        xx=stt*300
        yy=0
        if xx >= 1600 and xx < 3200: 
            yy=400
            xx=(stt-5)*400
        if xx >= 3200 and xx < 4800:
            yy=800
            xx=(stt-10)*400
        if xx >= 4800 and xx < 5400:
            yy=1200
            xx=(stt-15)*400
        if xx >= 5400 and xx < 6000:
            yy=1600
            xx=(stt-20)*400
        def generate_random_string():
            first_char = random.choice(string.ascii_lowercase)  # Chọn ngẫu nhiên một chữ cái viết thường làm ký tự đầu tiên
            remaining_chars = ''.join(random.choices(string.ascii_letters + string.digits, k=16))  # Chọn các ký tự còn lại
            
            random_string = first_char + remaining_chars
            return random_string

        NAme1=NAME.split(" ")[0]
        NAme2=NAME.split(" ")[1]+NAME.split(" ")[2]

        from selenium import webdriver
        from selenium.webdriver.common.by import By
        from selenium.webdriver.common.keys import Keys
        from selenium.webdriver.chrome.options import Options
        from selenium.webdriver.support.ui import WebDriverWait as WebWait
        from selenium.webdriver.support import expected_conditions as EC
        import time, requests, json ,string ,random

        options = Options()
        noiluu=self.lineEdit_3.text().replace('\\', '\\\\')
        print(noiluu)
        profile_path = noiluu+"\\"+IDprofiles
        print(profile_path)
        options.add_argument(f"user-data-dir={profile_path}")
        prefs = {
            "credentials_enable_service": False,
            "profile.password_manager_enabled": False
        }
        options.add_experimental_option("prefs", prefs)
        options.add_argument("--disable-blink-features=AutomationControlled")
        options.add_experimental_option("excludeSwitches", ["enable-automation"])
        options.add_argument(f"window-position={xx},{yy}")
        options.add_argument(f"window-size=300,400")
        TK=str(generate_random_string())+"@"+self.comboBox_2.currentText()
        MK=str(generate_random_string())
        self.tableWidget.setItem(dong, 0, QtWidgets.QTableWidgetItem(f"{TK}"))
        self.tableWidget.setItem(dong, 1, QtWidgets.QTableWidgetItem(f"{MK}"))
        self.tableWidget.setItem(dong, 3, QtWidgets.QTableWidgetItem(f"Vào web"))

        options.add_argument('--app=https://signup.live.com')
        driver = webdriver.Chrome(options=options)
        def a(KEY_API, SITE_KEY, SITE_URL):
            A = requests.get(f"https://api.rockcaptcha.com/FunCaptchaTokenTask?apikey={KEY_API}&sitekey={SITE_KEY}&siteurl={SITE_URL}").json()
            print(A)
            B = requests.get(f"https://api.rockcaptcha.com/getresult?apikey={KEY_API}&taskId={A['TaskId']}").json()
            print(B)
            while True:
                B = requests.get(f"https://api.rockcaptcha.com/getresult?apikey={KEY_API}&taskId={A['TaskId']}").json()
                if B['Status'] == 'PROCESSING':
                    pass
                else:
                    break
                time.sleep(1)
            return B

        print('Truy Cập web')
        driver.get("https://signup.live.com/?lic=1")

        # Chờ đợi đến khi phần tử usernameInput xuất hiện
        WebWait(driver, 100).until(EC.presence_of_element_located((By.ID, "usernameInput")))
        print('Điền Mail')
        self.tableWidget.setItem(dong, 3, QtWidgets.QTableWidgetItem(f"Điền Mail"))
        
        driver.find_element(By.ID, "usernameInput").send_keys(TK)
        driver.find_element(By.ID, "nextButton").click()

        # Chờ đợi đến khi phần tử Password xuất hiện
        self.tableWidget.setItem(dong, 3, QtWidgets.QTableWidgetItem(f"Nhập mật Khẩu"))

        WebWait(driver, 10).until(EC.presence_of_element_located((By.ID, "Password")))
        print('Điền Pass')
        driver.find_element(By.ID, "Password").send_keys(MK)
        driver.find_element(By.ID, "nextButton").click()
        self.tableWidget.setItem(dong, 3, QtWidgets.QTableWidgetItem(f"Nhập Tên"))

        # Chờ đợi đến khi phần tử lastNameInput xuất hiện
        WebWait(driver, 100).until(EC.presence_of_element_located((By.ID, "lastNameInput")))
        print('Điền Tên')
        driver.find_element(By.ID, "lastNameInput").send_keys(NAme1)
        driver.find_element(By.ID, "firstNameInput").click()
        driver.find_element(By.ID, "firstNameInput").send_keys(NAme2)
        driver.find_element(By.ID, "nextButton").click()
        self.tableWidget.setItem(dong, 3, QtWidgets.QTableWidgetItem(f"Nhập Ngày Sinh"))

        # Chờ đợi đến khi phần tử BirthYear xuất hiện
        WebWait(driver, 100).until(EC.presence_of_element_located((By.ID, "BirthYear")))
        print('Ngày Sinh')
        driver.find_element(By.ID, "BirthYear").click()
        driver.find_element(By.ID, "BirthYear").send_keys("2001")
        driver.find_element(By.ID, "BirthMonth").click()
        dropdown = driver.find_element(By.ID, "BirthMonth")
        try:dropdown.find_element(By.XPATH, "//option[. = 'January']").click()
        except:dropdown.find_element(By.XPATH, "//option[. = 'Tháng Một']").click()
        driver.find_element(By.ID, "BirthDay").click()
        dropdown = driver.find_element(By.ID, "BirthDay")
        dropdown.find_element(By.XPATH, "//option[. = '19']").click()
        driver.find_element(By.ID, "nextButton").click()
        self.tableWidget.setItem(dong, 3, QtWidgets.QTableWidgetItem(f"Giải Captcha"))

        print('Captcha')
        SITE_KEY = 'B7D8911C-5CC8-A9A3-35B0-554ACEE604DA'
        SITE_URL = 'https://signup.live.com/'

        
        # Chờ đợi iframe xuất hiện và chuyển vào iframe
        WebWait(driver, 100).until(EC.frame_to_be_available_and_switch_to_it((By.ID, 'enforcementFrame')))
        try:
            ID = a(KEY_API, SITE_KEY, SITE_URL)['Data']['Token']
            driver.execute_script('parent.postMessage(JSON.stringify({eventId:"challenge-complete",payload:{sessionToken:"' + ID + '"}}),"*")')
            time.sleep(15)
            self.thanhcong+=1
            self.tableWidget.setItem(dong, 3, QtWidgets.QTableWidgetItem(f"Tạo Thành Công !!"))
            self.label_6.setText(f'Thành Công: {self.thanhcong} | Thất Bại: {self.thatbai}')
            print(f'{TK}|{MK}')
            return f'{TK}|{MK}'

        except :
            self.thatbai+=1
            self.tableWidget.setItem(dong, 3, QtWidgets.QTableWidgetItem(f"Lỗi Không Giải Được Captcha !!"))
            self.label_6.setText(f'Thành Công: {self.thanhcong} | Thất Bại: {self.thatbai}')
            return False
        driver.quit()
    def fileloadgr(self):
        self.tableWidget.setRowCount(0)
        self.listIDchrome=[]
        a_c=requests.get("http://127.0.0.1:19995/api/v3/profiles").json()
        thuan=-1
        for x in a_c['data']:
            if x['group_id'] == int(self.lineEdit_4.text()):
                thuan+=1
                row_number = self.tableWidget.rowCount()
                self.tableWidget.insertRow(row_number)
                self.listIDchrome.append(x['id'])
                lon_cho=str(x['id'])
                print(lon_cho)
                self.tableWidget.setItem(thuan,3, QtWidgets.QTableWidgetItem(f"{lon_cho}"))

    def Batdau(self):
        self.sothutu=-1
        if len(self.lineEdit_2.text()) < 5:
            self.Thongbao("Bạn Cần Điền Key API Captcha Để Chạy Tool")
        else:
            if int(self.spinBox.value()) >= 1:
                self.LUONGCGA = True
                def Run4():
                    self.fileloadgr()
                    self.LUONGCGA = True
                    for i in range(int(self.spinBox.value())):
                        self.trunggian1=i
                        def Run5():
                            i=self.trunggian1
                            while self.LUONGCGA :
                                if int(self.spinBox_2.value()) > 0:
                                    if int(self.spinBox_2.value()) <= self.thanhcong:self.LUONGCGA = False
                                self.sothutu+=1
                                NAME=requests.get("https://story-shack-cdn-v2.glitch.me/generators/vietnamese-name-generator/male?count=2").json()['data'][0]['name']
                                row_number = self.tableWidget.rowCount()
                                self.tableWidget.insertRow(row_number)
                                KEY_API=self.lineEdit_2.text()
                                ACC=self.Reg(NAME,i,row_number,KEY_API,self.listIDchrome[self.sothutu])
                                if ACC != False:
                                    TK=ACC.split("|")[0]
                                    MK=ACC.split("|")[1]
                                    import openpyxl
                                    from openpyxl.utils import get_column_letter
                                    from openpyxl import load_workbook

                                    def create_excel_file(filename):
                                        # Tạo một Workbook mới
                                        wb = openpyxl.Workbook()

                                        # Chọn sheet đầu tiên và đặt tên cho sheet
                                        sheet = wb.active
                                        sheet.title = 'Tài khoản'

                                        # Đặt tên cho các cột
                                        sheet['A1'] = 'Mail'
                                        sheet['B1'] = 'Pass'

                                        # Lưu Workbook xuống file Excel
                                        wb.save(filename)
                                        print(f"Đã tạo file Excel mới: {filename}")

                                    def add_account_to_excel(filename, mail, password):
                                        # Mở Workbook từ file Excel đã tồn tại với chế độ chỉnh sửa
                                        try:
                                            wb = load_workbook(filename)
                                        except FileNotFoundError:
                                            create_excel_file(filename)
                                            wb = load_workbook(filename)
                                            
                                        sheet = wb.active

                                        # Tìm dòng cuối cùng có dữ liệu để thêm tài khoản mới vào
                                        max_row = sheet.max_row
                                        new_row = max_row + 1

                                        # Ghi tài khoản mới vào file Excel
                                        sheet.cell(row=new_row, column=1).value = mail
                                        sheet.cell(row=new_row, column=2).value = password

                                        # Lưu lại vào file Excel
                                        wb.save(filename)
                                        print(f"Đã thêm tài khoản mới vào file Excel: {mail}, {password}")

                                    # Tên file Excel để lưu dữ liệu
                                    excel_file = 'accounts.xlsx'

                                    # Thêm tài khoản mới vào file Excel
                                    add_account_to_excel(excel_file, TK, MK)
                        Thread(target=Run5).start()


                Thread(target=Run4).start()
            else:
                self.Thongbao("Bạn Cần Chọn Số Luồng Để Chạy")
    def Thongbao(self,text):
        msg_box = QMessageBox()
        msg_box.setText(text)
        msg_box.setWindowTitle("Lỗi")
        msg_box.setIcon(QMessageBox.Icon.Information)
        msg_box.exec()
    def retranslateUi(self, Reghotmail):
        _translate = QtCore.QCoreApplication.translate
        Reghotmail.setWindowTitle(_translate("Reghotmail", "MainWindow"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("Reghotmail", "Mail"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("Reghotmail", "Mật Khẩu"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("Reghotmail", "Proxy"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("Reghotmail", "Tình Trạng"))
        self.groupBox.setTitle(_translate("Reghotmail", "Điều Kiển"))
        self.pushButton_2.setText(_translate("Reghotmail", "Dừng"))
        self.pushButton.setText(_translate("Reghotmail", "Chạy"))
        self.groupBox_2.setTitle(_translate("Reghotmail", "Cài Đặt"))
        self.label_3.setText(_translate("Reghotmail", "Key API Proxy 1 Dòng 1 Key"))
        self.label.setText(_translate("Reghotmail", "Số Luồng"))
        self.label_2.setText(_translate("Reghotmail", "Số Lượng"))
        self.comboBox_2.setItemText(0, _translate("Reghotmail", "hotmail.com"))
        self.comboBox_2.setItemText(1, _translate("Reghotmail", "outlook.com"))
        self.label_5.setText(_translate("Reghotmail", "Domain"))
        self.label_7.setText(_translate("Reghotmail", "Đường Dẫn Profiles"))
        self.label_8.setText(_translate("Reghotmail", "Id Gr Profiles"))
        self.groupBox_3.setTitle(_translate("Reghotmail", "Cấu Hình Captcha"))
        self.pushButton_3.setText(_translate("Reghotmail", "Check"))
        self.comboBox.setItemText(0, _translate("Reghotmail", "https://rockcaptcha.com/"))
        self.comboBox.setItemText(1, _translate("Reghotmail", "https://rockcaptcha.com/"))
        self.comboBox.setItemText(2, _translate("Reghotmail", "https://rockcaptcha.com/"))
        self.label_6.setText(_translate("Reghotmail", "Thành Công : 0   |  Thất Bại : 00"))
        self.tableWidget.setColumnWidth(3, 300)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Reghotmail = QtWidgets.QMainWindow()
    ui = Ui_Reghotmail()
    ui.setupUi(Reghotmail)
    Reghotmail.show()
    sys.exit(app.exec())
